//
//  DisplayFunctions.swift
//  Swift SDK
//
//  Created by Yuji on 2016/**/**.
//  Copyright © 2016年 Star Micronics. All rights reserved.
//

import Foundation

class DisplayFunctions {
    static func createClearScreen() -> Data {
        let builder: SCDCBBuilder = SCDCBBuilder.createCommandBuilder()
        
        builder.appendClearScreen()
        
        return builder.commands.copy() as! Data
    }
    
    static func createTextPattern(_ number: Int) -> Data {
        let builder: SCDCBBuilder = SCDCBBuilder.createCommandBuilder()
        
//      builder.appendClearScreen()
        builder.appendCursorMode(SCDCBCursorMode.off)
        builder.appendSpecifiedPosition(1, y: 1)
        
        let pattern1: [UInt8] = [0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33,
                                 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47]
        
        let pattern2: [UInt8] = [0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b,
                                 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f]
        
        let pattern3: [UInt8] = [0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83,
                                 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97]
        
        let pattern4: [UInt8] = [0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
                                 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf]
        
        let pattern5: [UInt8] = [0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3,
                                 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7]
        
        let pattern6: [UInt8] = [0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb,
                                 0xfc, 0xfd, 0xfe, 0xff, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20]
        
        switch number {
        case 0  : builder.appendBytes(pattern1, length: pattern1.count)
        case 1  : builder.appendBytes(pattern2, length: pattern2.count)
        case 2  : builder.appendBytes(pattern3, length: pattern3.count)
        case 3  : builder.appendBytes(pattern4, length: pattern4.count)
        case 4  : builder.appendBytes(pattern5, length: pattern5.count)
        default : builder.appendBytes(pattern6, length: pattern6.count)     // 5
        }
        
        return builder.commands.copy() as! Data
    }
    
    static func createGraphicPattern(_ number: Int) -> Data {
        let builder: SCDCBBuilder = SCDCBBuilder.createCommandBuilder()
        
//      builder.appendClearScreen()
        builder.appendCursorMode(SCDCBCursorMode.off)
//      builder.appendSpecifiedPosition(1, y: 1)
        
        let pattern: [UInt8]
        
        switch number {
        case 0 :
            pattern = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x39, 0xc0,
                       0x00, 0x03, 0xf8, 0x39, 0xc0, 0x00, 0x03, 0xf8, 0x39, 0xc0, 0x00, 0x07, 0xfc, 0x39, 0xc0, 0x00, 0x0f, 0xfc, 0x39, 0xc0,
                       0x00, 0x0f, 0xbe, 0x39, 0xc0, 0x00, 0x0e, 0x0e, 0x39, 0xc0, 0x00, 0x1e, 0x0f, 0x39, 0xc0, 0x00, 0x1c, 0xe7, 0x39, 0xc0,
                       0x00, 0x1c, 0xe7, 0x39, 0xc0, 0x00, 0x1c, 0xe7, 0x39, 0xc0, 0x00, 0x1c, 0xf3, 0xb9, 0xc0, 0x00, 0x1c, 0xf3, 0xb9, 0xc0,
                       0x00, 0x1c, 0xf3, 0xf9, 0xc0, 0x00, 0x1c, 0xfb, 0xf9, 0xc0, 0x00, 0x1c, 0xf9, 0xf9, 0xc0, 0x00, 0x1c, 0xfc, 0xf9, 0xc0,
                       0x00, 0x1c, 0xec, 0xf9, 0xc0, 0x00, 0x1c, 0xee, 0xf9, 0xc0, 0x00, 0x1c, 0xee, 0x79, 0xc0, 0x00, 0x1c, 0xee, 0x39, 0xc0,
                       0x00, 0x1c, 0xe7, 0x33, 0xc0, 0x00, 0x1c, 0xe7, 0x03, 0x80, 0x00, 0x1c, 0xe7, 0xc7, 0x80, 0x00, 0x1c, 0xe3, 0xff, 0x80,
                       0x00, 0x1c, 0xe3, 0xff, 0x00, 0x00, 0x1c, 0xe1, 0xff, 0x00, 0x00, 0x1c, 0xe0, 0xfe, 0x00, 0x00, 0x1c, 0xe0, 0xfe, 0x00,
                       0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0xff, 0xfc, 0x00,
                       0x07, 0xfc, 0xff, 0xfe, 0x00, 0x07, 0xfc, 0xff, 0xfe, 0x00, 0x07, 0xfc, 0xff, 0xff, 0x00, 0x07, 0xfc, 0xff, 0xff, 0x00,
                       0x07, 0xfc, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x07, 0x80,
                       0x07, 0xfc, 0xff, 0xf3, 0xc0, 0x07, 0xfc, 0xff, 0xf3, 0xc0, 0x07, 0xfc, 0xff, 0xfb, 0xc0, 0x07, 0xfc, 0xff, 0xf9, 0xc0,
                       0x07, 0xfc, 0xff, 0xf9, 0xc0, 0x07, 0xfc, 0xff, 0xf9, 0xc0, 0x00, 0x1c, 0xe0, 0x79, 0xc0, 0x00, 0x1c, 0xe0, 0x39, 0xc0,
                       0x00, 0x1c, 0xe0, 0x39, 0xc0, 0x00, 0x1c, 0xe0, 0x39, 0xc0, 0x00, 0x1c, 0xe0, 0x39, 0xc0, 0x00, 0x1c, 0xe0, 0x39, 0xc0,
                       0x00, 0x1c, 0xe0, 0x39, 0xc0, 0x00, 0x1c, 0xe0, 0x39, 0xc0, 0x00, 0x1c, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00,
                       0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00,
                       0x00, 0x03, 0xfd, 0xfe, 0x00, 0x00, 0x03, 0xf0, 0x7e, 0x00, 0x00, 0x03, 0xe0, 0x1f, 0x00, 0x00, 0x07, 0xc0, 0x1f, 0x00,
                       0x00, 0x07, 0x8f, 0x8f, 0x80, 0x00, 0x0f, 0x9f, 0xc7, 0x80, 0x00, 0x0f, 0x3f, 0xe7, 0x80, 0x00, 0x0f, 0x7f, 0xf7, 0xc0,
                       0x00, 0x0e, 0x7f, 0xf3, 0xc0, 0x00, 0x1e, 0x7d, 0xfb, 0xc0, 0x00, 0x1e, 0x78, 0xfb, 0xc0, 0x00, 0x1e, 0xf0, 0x79, 0xc0,
                       0x00, 0x1e, 0xf0, 0x79, 0xc0, 0x00, 0x1c, 0xf0, 0x39, 0xc0, 0x00, 0x1c, 0xe0, 0x39, 0xc0, 0x00, 0x1c, 0xe0, 0x39, 0xc0,
                       0x00, 0x1c, 0xe0, 0x39, 0xc0, 0x00, 0x1c, 0xe0, 0x39, 0xc0, 0x00, 0x1c, 0xf0, 0x79, 0xc0, 0x00, 0x1e, 0xf0, 0x79, 0x80,
                       0x00, 0x1e, 0xf0, 0x00, 0x00, 0x00, 0x1e, 0x78, 0x00, 0x00, 0x00, 0x1e, 0x7f, 0xff, 0xc0, 0x00, 0x1e, 0x7f, 0xff, 0xc0,
                       0x00, 0x0f, 0x3f, 0xff, 0xc0, 0x00, 0x0f, 0x3f, 0xff, 0xc0, 0x00, 0x0f, 0x9f, 0xff, 0xc0, 0x00, 0x07, 0x87, 0xff, 0xc0,
                       0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00,
                       0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0xc0,
                       0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0,
                       0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xc0,
                       0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe3, 0xff, 0xc0, 0x00, 0x1f, 0xc7, 0xff, 0xc0, 0x00, 0x1f, 0x8f, 0xff, 0xc0,
                       0x00, 0x1f, 0x9f, 0xff, 0xc0, 0x00, 0x1f, 0x3f, 0xff, 0xc0, 0x00, 0x07, 0x3e, 0x00, 0x00, 0x00, 0x06, 0x7c, 0x00, 0x00,
                       0x00, 0x0e, 0x78, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x00, 0x0e, 0xf0, 0x00, 0x00, 0x00, 0x1c, 0xe0, 0x00, 0x00,
                       0x00, 0x1c, 0xe0, 0x00, 0x00, 0x00, 0x1c, 0xe0, 0x00, 0x00, 0x00, 0x1d, 0xe0, 0x00, 0x00, 0x00, 0x19, 0xe0, 0x00, 0x00,
                       0x00, 0x19, 0xe0, 0x00, 0x00, 0x00, 0x18, 0xe0, 0x00, 0x00, 0x00, 0x18, 0xe0, 0x00, 0x00, 0x00, 0x18, 0x80, 0x00, 0x00,
                       0x00, 0x19, 0x80, 0x00, 0x00, 0x00, 0x1b, 0xc0, 0x00, 0x00, 0x00, 0x1b, 0xc0, 0x00, 0x00, 0x00, 0x1b, 0xff, 0x00, 0x00,
                       0x00, 0x1b, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xec, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00,
                       0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x01, 0xb0, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x00, 0x00,
                       0x00, 0x07, 0xa0, 0x00, 0x00, 0x00, 0x0d, 0xb0, 0x00, 0x00, 0x00, 0x08, 0xb0, 0x00, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00,
                       0x00, 0x37, 0x10, 0x00, 0x00, 0x00, 0x37, 0x10, 0x00, 0x00, 0x00, 0x6d, 0x90, 0x00, 0x00, 0x00, 0x48, 0xd8, 0x00, 0x00,
                       0x00, 0xd8, 0x58, 0x00, 0x00, 0x01, 0xb0, 0x78, 0x00, 0x00, 0x03, 0x60, 0x18, 0x00, 0x00, 0x02, 0x40, 0x18, 0x00, 0x00,
                       0x07, 0xc0, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        case 1 :
            pattern = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xc6, 0x3f,
                       0xff, 0xfc, 0x07, 0xc6, 0x3f, 0xff, 0xfc, 0x07, 0xc6, 0x3f, 0xff, 0xf8, 0x03, 0xc6, 0x3f, 0xff, 0xf0, 0x03, 0xc6, 0x3f,
                       0xff, 0xf0, 0x41, 0xc6, 0x3f, 0xff, 0xf1, 0xf1, 0xc6, 0x3f, 0xff, 0xe1, 0xf0, 0xc6, 0x3f, 0xff, 0xe3, 0x18, 0xc6, 0x3f,
                       0xff, 0xe3, 0x18, 0xc6, 0x3f, 0xff, 0xe3, 0x18, 0xc6, 0x3f, 0xff, 0xe3, 0x0c, 0x46, 0x3f, 0xff, 0xe3, 0x0c, 0x46, 0x3f,
                       0xff, 0xe3, 0x0c, 0x06, 0x3f, 0xff, 0xe3, 0x04, 0x06, 0x3f, 0xff, 0xe3, 0x06, 0x06, 0x3f, 0xff, 0xe3, 0x03, 0x06, 0x3f,
                       0xff, 0xe3, 0x13, 0x06, 0x3f, 0xff, 0xe3, 0x11, 0x06, 0x3f, 0xff, 0xe3, 0x11, 0x86, 0x3f, 0xff, 0xe3, 0x11, 0xc6, 0x3f,
                       0xff, 0xe3, 0x18, 0xcc, 0x3f, 0xff, 0xe3, 0x18, 0xfc, 0x7f, 0xff, 0xe3, 0x18, 0x38, 0x7f, 0xff, 0xe3, 0x1c, 0x00, 0x7f,
                       0xff, 0xe3, 0x1c, 0x00, 0xff, 0xff, 0xe3, 0x1e, 0x00, 0xff, 0xff, 0xe3, 0x1f, 0x01, 0xff, 0xff, 0xe3, 0x1f, 0x01, 0xff,
                       0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0x00, 0x03, 0xff,
                       0xf8, 0x03, 0x00, 0x01, 0xff, 0xf8, 0x03, 0x00, 0x01, 0xff, 0xf8, 0x03, 0x00, 0x00, 0xff, 0xf8, 0x03, 0x00, 0x00, 0xff,
                       0xf8, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x7f,
                       0xf8, 0x03, 0x00, 0x0c, 0x3f, 0xf8, 0x03, 0x00, 0x0c, 0x3f, 0xf8, 0x03, 0x00, 0x04, 0x3f, 0xf8, 0x03, 0x00, 0x06, 0x3f,
                       0xf8, 0x03, 0x00, 0x06, 0x3f, 0xf8, 0x03, 0x00, 0x06, 0x3f, 0xff, 0xe3, 0x1f, 0x86, 0x3f, 0xff, 0xe3, 0x1f, 0xc6, 0x3f,
                       0xff, 0xe3, 0x1f, 0xc6, 0x3f, 0xff, 0xe3, 0x1f, 0xc6, 0x3f, 0xff, 0xe3, 0x1f, 0xc6, 0x3f, 0xff, 0xe3, 0x1f, 0xc6, 0x3f,
                       0xff, 0xe3, 0x1f, 0xc6, 0x3f, 0xff, 0xe3, 0x1f, 0xc6, 0x3f, 0xff, 0xe3, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff,
                       0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xff,
                       0xff, 0xfc, 0x02, 0x01, 0xff, 0xff, 0xfc, 0x0f, 0x81, 0xff, 0xff, 0xfc, 0x1f, 0xe0, 0xff, 0xff, 0xf8, 0x3f, 0xe0, 0xff,
                       0xff, 0xf8, 0x70, 0x70, 0x7f, 0xff, 0xf0, 0x60, 0x38, 0x7f, 0xff, 0xf0, 0xc0, 0x18, 0x7f, 0xff, 0xf0, 0x80, 0x08, 0x3f,
                       0xff, 0xf1, 0x80, 0x0c, 0x3f, 0xff, 0xe1, 0x82, 0x04, 0x3f, 0xff, 0xe1, 0x87, 0x04, 0x3f, 0xff, 0xe1, 0x0f, 0x86, 0x3f,
                       0xff, 0xe1, 0x0f, 0x86, 0x3f, 0xff, 0xe3, 0x0f, 0xc6, 0x3f, 0xff, 0xe3, 0x1f, 0xc6, 0x3f, 0xff, 0xe3, 0x1f, 0xc6, 0x3f,
                       0xff, 0xe3, 0x1f, 0xc6, 0x3f, 0xff, 0xe3, 0x1f, 0xc6, 0x3f, 0xff, 0xe3, 0x0f, 0x86, 0x3f, 0xff, 0xe1, 0x0f, 0x86, 0x7f,
                       0xff, 0xe1, 0x0f, 0xff, 0xff, 0xff, 0xe1, 0x87, 0xff, 0xff, 0xff, 0xe1, 0x80, 0x00, 0x3f, 0xff, 0xe1, 0x80, 0x00, 0x3f,
                       0xff, 0xf0, 0xc0, 0x00, 0x3f, 0xff, 0xf0, 0xc0, 0x00, 0x3f, 0xff, 0xf0, 0x60, 0x00, 0x3f, 0xff, 0xf8, 0x78, 0x00, 0x3f,
                       0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff,
                       0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x3f,
                       0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x3f,
                       0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x3f,
                       0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1c, 0x00, 0x3f, 0xff, 0xe0, 0x38, 0x00, 0x3f, 0xff, 0xe0, 0x70, 0x00, 0x3f,
                       0xff, 0xe0, 0x60, 0x00, 0x3f, 0xff, 0xe0, 0xc0, 0x00, 0x3f, 0xff, 0xf8, 0xc1, 0xff, 0xff, 0xff, 0xf9, 0x83, 0xff, 0xff,
                       0xff, 0xf1, 0x87, 0xff, 0xff, 0xff, 0xf1, 0x8f, 0xff, 0xff, 0xff, 0xf1, 0x0f, 0xff, 0xff, 0xff, 0xe3, 0x1f, 0xff, 0xff,
                       0xff, 0xe3, 0x1f, 0xff, 0xff, 0xff, 0xe3, 0x1f, 0xff, 0xff, 0xff, 0xe2, 0x1f, 0xff, 0xff, 0xff, 0xe6, 0x1f, 0xff, 0xff,
                       0xff, 0xe6, 0x1f, 0xff, 0xff, 0xff, 0xe7, 0x1f, 0xff, 0xff, 0xff, 0xe7, 0x1f, 0xff, 0xff, 0xff, 0xe7, 0x7f, 0xff, 0xff,
                       0xff, 0xe6, 0x7f, 0xff, 0xff, 0xff, 0xe4, 0x3f, 0xff, 0xff, 0xff, 0xe4, 0x3f, 0xff, 0xff, 0xff, 0xe4, 0x00, 0xff, 0xff,
                       0xff, 0xe4, 0xf9, 0xff, 0xff, 0xff, 0xe0, 0x13, 0xff, 0xff, 0xff, 0xff, 0x97, 0xff, 0xff, 0xff, 0xff, 0x27, 0xff, 0xff,
                       0xff, 0xff, 0x2f, 0xff, 0xff, 0xff, 0xfe, 0x4f, 0xff, 0xff, 0xff, 0xfe, 0x5f, 0xff, 0xff, 0xff, 0xfe, 0x5f, 0xff, 0xff,
                       0xff, 0xf8, 0x5f, 0xff, 0xff, 0xff, 0xf2, 0x4f, 0xff, 0xff, 0xff, 0xf7, 0x4f, 0xff, 0xff, 0xff, 0xe7, 0xcf, 0xff, 0xff,
                       0xff, 0xc8, 0xef, 0xff, 0xff, 0xff, 0xc8, 0xef, 0xff, 0xff, 0xff, 0x92, 0x6f, 0xff, 0xff, 0xff, 0xb7, 0x27, 0xff, 0xff,
                       0xff, 0x27, 0xa7, 0xff, 0xff, 0xfe, 0x4f, 0x87, 0xff, 0xff, 0xfc, 0x9f, 0xe7, 0xff, 0xff, 0xfd, 0xbf, 0xe7, 0xff, 0xff,
                       0xf8, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
        case 2 :
            pattern = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00,
                       0x00, 0x07, 0x80, 0x3e, 0x00, 0x00, 0x0d, 0xc0, 0x36, 0x00, 0x00, 0x0d, 0xc0, 0x12, 0x00, 0x00, 0x18, 0xc0, 0x1b, 0x00,
                       0x00, 0x10, 0xe0, 0x1b, 0x00, 0x00, 0x10, 0xe0, 0x19, 0x00, 0x00, 0x30, 0xe0, 0x0d, 0x80, 0x00, 0x30, 0x60, 0x0d, 0x80,
                       0x00, 0x60, 0x70, 0x0d, 0x80, 0x00, 0x40, 0x70, 0x04, 0x80, 0x00, 0x40, 0x30, 0x06, 0xc0, 0x00, 0x80, 0x3f, 0xfe, 0xc0,
                       0x00, 0x80, 0x38, 0x06, 0x40, 0x01, 0x00, 0x38, 0x02, 0x60, 0x01, 0x00, 0x18, 0x03, 0x60, 0x03, 0x00, 0x1c, 0x03, 0x60,
                       0x03, 0x00, 0x1c, 0x01, 0x20, 0x02, 0x00, 0x1c, 0x01, 0xb0, 0x06, 0x00, 0x0e, 0x01, 0xb0, 0x04, 0x00, 0x0e, 0x00, 0x90,
                       0x0c, 0x00, 0x0e, 0x00, 0x98, 0x0c, 0x00, 0x46, 0x00, 0xd8, 0x08, 0x00, 0x07, 0x00, 0xd8, 0x18, 0x00, 0x07, 0x00, 0x48,
                       0x10, 0x00, 0x07, 0x00, 0x6c, 0x30, 0x00, 0x23, 0x00, 0x6c, 0x20, 0x00, 0x03, 0x80, 0x24, 0x60, 0x00, 0x03, 0x80, 0x26,
                       0x40, 0x00, 0x01, 0x80, 0x36, 0x40, 0x00, 0x01, 0xc0, 0x32, 0x40, 0x00, 0x01, 0xc0, 0x12, 0x60, 0x00, 0x01, 0xc0, 0x1b,
                       0x20, 0x00, 0x00, 0xc0, 0x1b, 0x20, 0x00, 0x00, 0xe0, 0x09, 0x30, 0x00, 0x00, 0xe0, 0x09, 0x10, 0x00, 0x00, 0xe0, 0x09,
                       0x10, 0x00, 0x00, 0xe0, 0x0b, 0x10, 0x00, 0x00, 0xc0, 0x1b, 0x18, 0x00, 0x01, 0xff, 0xfa, 0x08, 0x00, 0x01, 0x80, 0x16,
                       0x08, 0x00, 0x03, 0x80, 0x36, 0x0c, 0x00, 0x03, 0x00, 0x34, 0x04, 0x00, 0x03, 0x00, 0x2c, 0x04, 0x00, 0x07, 0x00, 0x68,
                       0x06, 0x00, 0x06, 0x00, 0x58, 0x02, 0x00, 0x0e, 0x00, 0xf8, 0x02, 0x00, 0x0c, 0x00, 0xf0, 0x02, 0x00, 0x0c, 0x01, 0xe0,
                       0x03, 0x00, 0x1c, 0x01, 0xc0, 0x01, 0x00, 0x18, 0x01, 0xc0, 0x01, 0x00, 0x18, 0x03, 0xc0, 0x01, 0x80, 0x30, 0x02, 0xc0,
                       0x00, 0x80, 0x30, 0x06, 0xc0, 0x00, 0x80, 0x60, 0x06, 0x80, 0x00, 0xc0, 0x60, 0x05, 0x80, 0x00, 0x40, 0xe0, 0x0d, 0x80,
                       0x00, 0x40, 0xc0, 0x0f, 0x00, 0x00, 0x40, 0xc0, 0x1b, 0x00, 0x00, 0x61, 0xc0, 0x1a, 0x00, 0x00, 0x21, 0x80, 0x36, 0x00,
                       0x00, 0x21, 0x80, 0x36, 0x00, 0x00, 0x33, 0x00, 0x2c, 0x00, 0x00, 0x13, 0x00, 0x6c, 0x00, 0x00, 0x1e, 0x00, 0x78, 0x00,
                       0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00,
                       0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x01, 0x1c, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00,
                       0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xe4, 0x00, 0x00,
                       0x00, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00,
                       0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x00,
                       0x00, 0x07, 0x8e, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x00,
                       0x00, 0x07, 0x9e, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00,
                       0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00,
                       0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00,
                       0x00, 0x07, 0xc1, 0xf0, 0x00, 0x00, 0x07, 0x80, 0xf0, 0x00, 0x00, 0x07, 0x00, 0xf0, 0x00, 0x00, 0x07, 0x00, 0xf0, 0x00,
                       0x00, 0x07, 0x00, 0xf0, 0x00, 0x00, 0x07, 0x80, 0xf0, 0x00, 0x00, 0x07, 0xc1, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00,
                       0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00,
                       0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00,
                       0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x00,
                       0x00, 0x07, 0x8e, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x00, 0x00, 0x07, 0x9e, 0x00, 0x00,
                       0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00,
                       0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
//      case 3  :
        default :
            pattern = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x0f, 0xff,
                       0xff, 0xf8, 0x7f, 0xc1, 0xff, 0xff, 0xf2, 0x3f, 0xc9, 0xff, 0xff, 0xf2, 0x3f, 0xed, 0xff, 0xff, 0xe7, 0x3f, 0xe4, 0xff,
                       0xff, 0xef, 0x1f, 0xe4, 0xff, 0xff, 0xef, 0x1f, 0xe6, 0xff, 0xff, 0xcf, 0x1f, 0xf2, 0x7f, 0xff, 0xcf, 0x9f, 0xf2, 0x7f,
                       0xff, 0x9f, 0x8f, 0xf2, 0x7f, 0xff, 0xbf, 0x8f, 0xfb, 0x7f, 0xff, 0xbf, 0xcf, 0xf9, 0x3f, 0xff, 0x7f, 0xc0, 0x01, 0x3f,
                       0xff, 0x7f, 0xc7, 0xf9, 0xbf, 0xfe, 0xff, 0xc7, 0xfd, 0x9f, 0xfe, 0xff, 0xe7, 0xfc, 0x9f, 0xfc, 0xff, 0xe3, 0xfc, 0x9f,
                       0xfc, 0xff, 0xe3, 0xfe, 0xdf, 0xfd, 0xff, 0xe3, 0xfe, 0x4f, 0xf9, 0xff, 0xf1, 0xfe, 0x4f, 0xfb, 0xff, 0xf1, 0xff, 0x6f,
                       0xf3, 0xff, 0xf1, 0xff, 0x67, 0xf3, 0xff, 0xb9, 0xff, 0x27, 0xf7, 0xff, 0xf8, 0xff, 0x27, 0xe7, 0xff, 0xf8, 0xff, 0xb7,
                       0xef, 0xff, 0xf8, 0xff, 0x93, 0xcf, 0xff, 0xdc, 0xff, 0x93, 0xdf, 0xff, 0xfc, 0x7f, 0xdb, 0x9f, 0xff, 0xfc, 0x7f, 0xd9,
                       0xbf, 0xff, 0xfe, 0x7f, 0xc9, 0xbf, 0xff, 0xfe, 0x3f, 0xcd, 0xbf, 0xff, 0xfe, 0x3f, 0xed, 0x9f, 0xff, 0xfe, 0x3f, 0xe4,
                       0xdf, 0xff, 0xff, 0x3f, 0xe4, 0xdf, 0xff, 0xff, 0x1f, 0xf6, 0xcf, 0xff, 0xff, 0x1f, 0xf6, 0xef, 0xff, 0xff, 0x1f, 0xf6,
                       0xef, 0xff, 0xff, 0x1f, 0xf4, 0xef, 0xff, 0xff, 0x3f, 0xe4, 0xe7, 0xff, 0xfe, 0x00, 0x05, 0xf7, 0xff, 0xfe, 0x7f, 0xe9,
                       0xf7, 0xff, 0xfc, 0x7f, 0xc9, 0xf3, 0xff, 0xfc, 0xff, 0xcb, 0xfb, 0xff, 0xfc, 0xff, 0xd3, 0xfb, 0xff, 0xf8, 0xff, 0x97,
                       0xf9, 0xff, 0xf9, 0xff, 0xa7, 0xfd, 0xff, 0xf1, 0xff, 0x07, 0xfd, 0xff, 0xf3, 0xff, 0x0f, 0xfd, 0xff, 0xf3, 0xfe, 0x1f,
                       0xfc, 0xff, 0xe3, 0xfe, 0x3f, 0xfe, 0xff, 0xe7, 0xfe, 0x3f, 0xfe, 0xff, 0xe7, 0xfc, 0x3f, 0xfe, 0x7f, 0xcf, 0xfd, 0x3f,
                       0xff, 0x7f, 0xcf, 0xf9, 0x3f, 0xff, 0x7f, 0x9f, 0xf9, 0x7f, 0xff, 0x3f, 0x9f, 0xfa, 0x7f, 0xff, 0xbf, 0x1f, 0xf2, 0x7f,
                       0xff, 0xbf, 0x3f, 0xf0, 0xff, 0xff, 0xbf, 0x3f, 0xe4, 0xff, 0xff, 0x9e, 0x3f, 0xe5, 0xff, 0xff, 0xde, 0x7f, 0xc9, 0xff,
                       0xff, 0xde, 0x7f, 0xc9, 0xff, 0xff, 0xcc, 0xff, 0xd3, 0xff, 0xff, 0xec, 0xff, 0x93, 0xff, 0xff, 0xe1, 0xff, 0x87, 0xff,
                       0xff, 0xe0, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff,
                       0xff, 0xff, 0x7b, 0xff, 0xff, 0xff, 0xfe, 0xe3, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff,
                       0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x83, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x1b, 0xff, 0xff,
                       0xff, 0xfc, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff,
                       0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x71, 0xff, 0xff,
                       0xff, 0xf8, 0x71, 0xff, 0xff, 0xff, 0xf8, 0x71, 0xff, 0xff, 0xff, 0xf8, 0x71, 0xff, 0xff, 0xff, 0xf8, 0x71, 0xff, 0xff,
                       0xff, 0xf8, 0x61, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff,
                       0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff,
                       0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff,
                       0xff, 0xf8, 0x3e, 0x0f, 0xff, 0xff, 0xf8, 0x7f, 0x0f, 0xff, 0xff, 0xf8, 0xff, 0x0f, 0xff, 0xff, 0xf8, 0xff, 0x0f, 0xff,
                       0xff, 0xf8, 0xff, 0x0f, 0xff, 0xff, 0xf8, 0x7f, 0x0f, 0xff, 0xff, 0xf8, 0x3e, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x0f, 0xff,
                       0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff,
                       0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff,
                       0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x71, 0xff, 0xff, 0xff, 0xf8, 0x71, 0xff, 0xff,
                       0xff, 0xf8, 0x71, 0xff, 0xff, 0xff, 0xf8, 0x71, 0xff, 0xff, 0xff, 0xf8, 0x71, 0xff, 0xff, 0xff, 0xf8, 0x61, 0xff, 0xff,
                       0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff,
                       0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
        }
        
        builder.appendGraphic(pattern)
        
        return builder.commands.copy() as! Data
    }
    
    static func createCharacterSet(_ internationalType: SCDCBInternationalType, codePageType: SCDCBCodePageType) -> Data {
        let builder: SCDCBBuilder = SCDCBBuilder.createCommandBuilder()
        
//      builder.appendClearScreen()
        builder.appendCursorMode(SCDCBCursorMode.off)
        builder.appendSpecifiedPosition(1, y: 1)
        
        builder.appendCharacterSet(internationalType, codePageType: codePageType)
        
        let pattern1: [UInt8] = [0x2d, 0x20, 0x20, 0x20, 0x23, 0x24, 0x40, 0x5b, 0x5c, 0x5d, 0x5e, 0x60, 0x7b, 0x7c, 0x7d, 0x7e, 0x20, 0x20, 0x20, 0x2d,
                                 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3]
        
        let pattern2: [UInt8] = [0x2d, 0x20, 0x20, 0x20, 0x23, 0x24, 0x40, 0x5b, 0x5c, 0x5d, 0x5e, 0x60, 0x7b, 0x7c, 0x7d, 0x7e, 0x20, 0x20, 0x20, 0x2d,
                                 0x88, 0xa0, 0x88, 0xa1, 0x88, 0xa2, 0x88, 0xa3, 0x88, 0xa4, 0x88, 0xa5, 0x88, 0xa6, 0x88, 0xa7, 0x88, 0xa8, 0x88, 0xa9]
        
        let pattern3: [UInt8] = [0x2d, 0x20, 0x20, 0x20, 0x23, 0x24, 0x40, 0x5b, 0x5c, 0x5d, 0x5e, 0x60, 0x7b, 0x7c, 0x7d, 0x7e, 0x20, 0x20, 0x20, 0x2d,
                                 0xb0, 0xa1, 0xb0, 0xa2, 0xb0, 0xa3, 0xb0, 0xa4, 0xb0, 0xa5, 0xb0, 0xa6, 0xb0, 0xa7, 0xb0, 0xa8, 0xb0, 0xa9, 0xb0, 0xaa]
        
        let pattern4: [UInt8] = [0x2d, 0x20, 0x20, 0x20, 0x23, 0x24, 0x40, 0x5b, 0x5c, 0x5d, 0x5e, 0x60, 0x7b, 0x7c, 0x7d, 0x7e, 0x20, 0x20, 0x20, 0x2d,
                                 0xa4, 0x40, 0xa4, 0x41, 0xa4, 0x42, 0xa4, 0x43, 0xa4, 0x44, 0xa4, 0x45, 0xa4, 0x46, 0xa4, 0x47, 0xa4, 0x48, 0xa4, 0x49]
        
        let pattern5: [UInt8] = [0x2d, 0x20, 0x20, 0x20, 0x23, 0x24, 0x40, 0x5b, 0x5c, 0x5d, 0x5e, 0x60, 0x7b, 0x7c, 0x7d, 0x7e, 0x20, 0x20, 0x20, 0x2d,
                                 0xb0, 0xa1, 0xb0, 0xa2, 0xb0, 0xa3, 0xb0, 0xa4, 0xb0, 0xa5, 0xb0, 0xa6, 0xb0, 0xa7, 0xb0, 0xa8, 0xb0, 0xa9, 0xb0, 0xaa]
        
        switch codePageType {
//      default                                   : builder.appendBytes(pattern1, length: pattern1.count)     // CP437,Katakana,CP850,CP860,CP863,CP865,CP1252,CP866,CP852,CP858
        case SCDCBCodePageType.japanese           : builder.appendBytes(pattern2, length: pattern2.count)
        case SCDCBCodePageType.simplifiedChinese  : builder.appendBytes(pattern3, length: pattern3.count)
        case SCDCBCodePageType.traditionalChinese : builder.appendBytes(pattern4, length: pattern4.count)
        case SCDCBCodePageType.hangul             : builder.appendBytes(pattern5, length: pattern5.count)
        default                                   : builder.appendBytes(pattern1, length: pattern1.count)     // CP437,Katakana,CP850,CP860,CP863,CP865,CP1252,CP866,CP852,CP858
        }
        
        return builder.commands.copy() as! Data
    }
    
    static func createTurnOn(_ turnOn: Bool) -> Data {
        let builder: SCDCBBuilder = SCDCBBuilder.createCommandBuilder()
        
////    builder.appendClearScreen()
      builder.appendCursorMode(SCDCBCursorMode.off)
//      builder.appendSpecifiedPosition(1, y: 1)
//
//      let pattern: NSData = ("Star Micronics      " +
//                             "Total :        12345").data(using: String.Encoding.ascii)!
//
//      builder.appendData(pattern)
        
        builder.appendTurnOn(turnOn)
        
        return builder.commands.copy() as! Data
    }
    
    static func createCursorMode(_ cursorMode: SCDCBCursorMode) -> Data {
        let builder: SCDCBBuilder = SCDCBBuilder.createCommandBuilder()
        
//      builder.appendClearScreen()
        builder.appendCursorMode(SCDCBCursorMode.off)
        builder.appendSpecifiedPosition(1, y: 1)
        
        let pattern: Data = ("Star Micronics      " +
                               "Total :        12345").data(using: String.Encoding.ascii)!
        
        builder.appendData(pattern)
        
        builder.appendSpecifiedPosition(20, y: 2)
        
        builder.appendCursorMode(cursorMode)
        
        return builder.commands.copy() as! Data
    }
    
    static func createContrastMode(_ contrastMode: SCDCBContrastMode) -> Data {
        let builder: SCDCBBuilder = SCDCBBuilder.createCommandBuilder()
        
////    builder.appendClearScreen()
//      builder.appendCursorMode(SCDCBCursorMode.off)
//      builder.appendSpecifiedPosition(1, y: 1)
//
//      let pattern: NSData = ("Star Micronics      " +
//                             "Total :        12345").data(using: String.Encoding.ascii)!
//
//      builder.appendData(pattern)
        
        builder.appendContrastMode(contrastMode)
        
        return builder.commands.copy() as! Data
    }
    
    static func createUserDefinedCharacter(_ set: Bool) -> Data {
        let builder: SCDCBBuilder = SCDCBBuilder.createCommandBuilder()
        
//      builder.appendClearScreen()
        builder.appendCursorMode(SCDCBCursorMode.off)
        builder.appendSpecifiedPosition(1, y: 1)
        
        builder.appendCharacterSet(SCDCBInternationalType.usa, codePageType: SCDCBCodePageType.japanese)
        
        if set {
            builder.appendUserDefinedCharacter(0, code: 0x20, font: [0x00, 0x00, 0x32, 0x00, 0x49, 0x00, 0x49, 0x7f, 0x26, 0x48, 0x00, 0x48, 0x00, 0x30, 0x00, 0x00])
            
            builder.appendUserDefinedDbcsCharacter(0, code: 0x8140, font: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x04, 0x90, 0x04, 0x90, 0x02, 0x60,
                                                                           0x00, 0x00, 0x07, 0xf0, 0x04, 0x80, 0x04, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        }
        else {
            builder.appendUserDefinedCharacter(0, code: 0x00, font:nil)
            
            builder.appendUserDefinedDbcsCharacter(0, code: 0x0000, font:nil)
        }
        
        let pattern: [UInt8] = [0x5b, 0x20, 0x20, 0x53, 0x74, 0x61, 0x72, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x20, 0x20, 0x5d,
                                0x5b, 0x81, 0x40, 0x81, 0x40, 0x83, 0x58, 0x83, 0x5e, 0x81, 0x5b, 0x90, 0xb8, 0x96, 0xa7, 0x81, 0x40, 0x81, 0x40, 0x5d]
        
        builder.appendBytes(pattern, length: pattern.count)
        
        return builder.commands.copy() as! Data
    }
}
